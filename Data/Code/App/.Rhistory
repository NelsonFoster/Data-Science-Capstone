pops <- data.frame(blocks[,14:18]) * data.frame(blocks)[,11]
pops <- as.matrix(pops/100)
colnames(pops) <- c("White", "Black", "Ameri", "Asian", "Other")
# a true / false for vacant properties
vac.10 <- (blocks$P_VACANT > 10)
# create a cross tabulation
mat.tab <- xtabs(pops ~vac.10)
# melt the data
df <- melt(mat.tab)
gplot(data = df) +
stat_mosaic(aes(weight = value, x = product(Var2),
fill=factor(vac.10)), na.rm=TRUE) +
theme(axis.text.x=element_text(angle=-90, hjust= .1)) +
labs(y='Proportion of Vacant Properties', x = 'Ethnic group',
title="Mosaic Plot of Vacant Properties with ethnicty") +
guides(fill=guide_legend(title = "> 10 percent", reverse = TRUE))
library(ggplot)
library(ggplot2)
# create the dataset
pops <- data.frame(blocks[,14:18]) * data.frame(blocks)[,11]
pops <- as.matrix(pops/100)
colnames(pops) <- c("White", "Black", "Ameri", "Asian", "Other")
# a true / false for vacant properties
vac.10 <- (blocks$P_VACANT > 10)
# create a cross tabulation
mat.tab <- xtabs(pops ~vac.10)
# melt the data
df <- melt(mat.tab)
ggplot(data = df) +
stat_mosaic(aes(weight = value, x = product(Var2),
fill=factor(vac.10)), na.rm=TRUE) +
theme(axis.text.x=element_text(angle=-90, hjust= .1)) +
labs(y='Proportion of Vacant Properties', x = 'Ethnic group',
title="Mosaic Plot of Vacant Properties with ethnicty") +
guides(fill=guide_legend(title = "> 10 percent", reverse = TRUE))
library(GIStools)
data(tornados)
install.packages("GISTools")
library(GIStools)
data(tornados)
library(GIStools)
library(shiny)
library(glmnet)
library(GWmodel)
library(ISLR)
library(plotmo)
library(gradDescent)
library(caret)
library(dplyr)
library(sp)
library(sf)
library(GISTools)
library(OpenStreetMap)
library(raster)
library(rgdal)
library(colorspace)
library(maptools)
library(devtools)
library(r2d3)
library(R2HTML)
library(plotly)
library(ggplot2)
library(ggmap)
library(shinydashboard)
library(shinydashboardPlus)
library(grid)
library(ggmosaic)
library(spdep)
library(grid)
library(RgoogleMaps)
library(tmap, tmaptools)
library(tidyverse)
library(reshape2)
library(GISTools)
data(tornados)
# convert to sf objects
torn_sf <- st_as_sf(torn)
us_states_sf <- st_as_sf(us_states)
# plot extent and grey background
tm_shape(us_states_sf) +
tm_polygons("grey90") +
# add the torn points
tm_shape(torn_sf) +
tm_dots(col = "#FB6A4A", size = 0.04, shape = 1, alpha = 0.5) +
# map the state borders
tm_shape(us_states_sf) +
tm_borders(col = "black") +
tm_layout(frame = F)
ls()
plot(us_states, col = "grey90")
plot(torn, add = T, pch = 1, col = "#FB6A4A4C", cex = 0.4)
plot(us_states, add = T)
summary(sf)
summary(torn)
summary(torn)
summary(torn_sf)
st_geometry(torn_sf)
index <- us_states$STATE_NAME == "Texas" |
us_states$STATE_NAME == "New Mexico" |
us_states$STATE_NAME == "Oklahoma" |
us_states$STATE_NAME == "Arkansas"
AoI <- us_states[index,]
# OR....
AoI_sf <- us_states_sf[index,]
tm_shape(AoI_sf) +
tm_borders(col = "black") +
tm_layout(frame = F) +
# add the torn points
tm_shape(torn_sf) +
tm_dots(col = "#FB6A4A", size = 0.2, shape = 1, alpha = 0.5)
# OR in sp
plot(AoI)
plot(torn, add = T, pch = 1, col = "#FB6A4A4C")
torn_clip_sf <- torn_sf[AoI_sf,]
ls(STATE_NAME)
library(spatstat)
library(spdep)
# Load GISTools (for the data) and tmap (for the mapping)
require(GISTools)
require(tmap)
# Get the data
data(newhaven)
# look at it
# select 'view' mode
tmap_mode('view')
# Create the map of blocks and incidents
tm_shape(blocks) + tm_borders() + tm_shape(breach) +
tm_dots(col='navyblue')
choose_bw <- function(spdf) {
X <- coordinates(spdf)
sigma <- c(sd(X[,1]),sd(X[,2]))  * (2 / (3 * nrow(X))) ^ (1/6)
return(sigma/1000)
}
library(tmaptools)
tmap_mode('view')
breach_dens <- smooth_map(breach,cover=blocks, bandwidth = choose_bw(breach))
tm_shape(breach_dens$raster) + tm_raster()
library(tmaptools)
tmap_mode('view')
breach_dens <- smooth_map(breach,cover=blocks, bandwidth = choose_bw(breach))
tm_shape(breach_dens$raster) + tm_raster()
# R Kernel Density comparison - first make sure the New Haven data is available
require(GISTools)
data(newhaven)
tmap_mode('plot')
# Create the KDEs for the two data sets:
contours <- seq(0,1.4,by=0.2)
brn_dens <- smooth_map(burgres.n,cover=blocks, breaks=contours,
style='fixed',
bandwidth = choose_bw(burgres.n))
brf_dens <- smooth_map(burgres.f,cover=blocks, breaks=contours,
style='fixed',
bandwidth = choose_bw(burgres.f))
dn <- tm_shape(blocks) + tm_borders() +
tm_shape(brn_dens$polygons) + tm_fill(col='level',alpha=0.8) +
tm_layout(title="Non-Forced Burglaries")
df <- tm_shape(blocks) + tm_borders() +
tm_shape(brf_dens$polygons) + tm_fill(col='level',alpha=0.8) +
tm_layout(title="Forced Burglaries")
tmap_arrange(dn,df)
tmap_mode('view')
tm_shape(blocks) + tm_borders(alpha=0.5) +
tm_shape(breach_dens$iso) + tm_lines(col='darkred', lwd=2)
setwd("~/Documents/GitHub/Data-Science-Capstone/Data/Code/App")
library(shiny)
library(leaflet)
library(dplyr)
library(tidyr)
library(tidyverse)
library(tidycensus)
library(tigris)
options(tigris_use_cache = TRUE)
library(sf)
library(sp)
library(censusapi)
library(rgdal)
library(KernSmooth)
library(spatstat)
library(spdep)
library(GISTools)
library(tmap)
library(tmaptools)
states <- states(cb=T)
states %>%
leaflet() %>%
addTiles() %>%
addPolygons(popup=~NAME)
df = read.csv("./mp_points.csv", stringsAsFactors = F)
df <- tidyr::separate(data=df,
col=geo_point_2d,
into=c("Latitude", "Longitude"),
sep=",",
remove=FALSE)
df$Latitude <- stringr::str_replace_all(df$Latitude, "[(]", "")
df$Longitude <- stringr::str_replace_all(df$Longitude, "[)]", "")
df$Latitude <- as.numeric(df$Latitude)
df$Longitude <- as.numeric(df$Longitude)
df$Race_Ethnicity[df$Race_Ethnicity=="Black / African American;Hispanic / Latino"] <- "Black / African American"
df$Race_Ethnicity[df$Race_Ethnicity=="Black / African American;White / Caucasian"] <- "Black / African American"
df$Race_Ethnicity[df$Race_Ethnicity=="Hispanic / Latino;Asian"] <- "Hispanic / Latino"
df$Race_Ethnicity[df$Race_Ethnicity=="Hispanic / Latino;Native American / Alaskan Native"] <- "Hispanic / Latino"
df$Race_Ethnicity[df$Race_Ethnicity=="Hispanic / Latino;Uncertain"] <- "Hispanic / Latino"
df$Race_Ethnicity[df$Race_Ethnicity=="Other"] <- "Other/Uncertain"
df$Race_Ethnicity[df$Race_Ethnicity=="Uncertain"] <- "Other/Uncertain"
df$Race_Ethnicity[df$Race_Ethnicity=="White / Caucasian;Black / African American"] <- "White / Caucasian"
df$Race_Ethnicity[df$Race_Ethnicity=="White / Caucasian;Hispanic / Latino"] <- "White / Caucasian"
df$Race_Ethnicity[df$Race_Ethnicity=="White / Caucasian;Uncertain"] <- "White / Caucasian"
mp_state <- df %>%
group_by(State_Of_Last_Contact) %>%
summarize(total=n()) %>%
mutate(type = "Missing Persons")
View(mp_state)
mp_race_ethnicity <- df %>%
group_by(Race_Ethnicity) %>%
summarize(total=n()) %>%
mutate(type = "Race/Ethnicity")
View(mp_race_ethnicity)
states_merged_mp <- geo_join(states, mp_state, "STUSPS", "State_Of_Last_Contact")
pal <- colorNumeric("Blues", domain=states_merged_mp$total)
states_merged_mp <- subset(states_merged_mp, !is.na(total))
popup_mp <- paste0("Total Missing Persons: ", as.character(states_merged_mp$total))
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>% #geographic center of the United States
addPolygons(data = states_merged_mp ,
fillColor = ~pal(states_merged_mp$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_mp) %>%
addLegend(pal = pal,
values = states_merged_mp$total,
position = "bottomright",
title = "Missing Persons in the United States")
Sys.setenv(CENSUS_KEY="31fff949176a736010c1e360cacac97f81c300b8")
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_KEY")
census_key <- ("31fff949176a736010c1e360cacac97f81c300b8")
state_pop <-  getCensus(name="acs/acs5",
vintage=2015,
key=census_key,
vars=c("NAME", "B01003_001E"),
region="state:*")
colnames(state_pop) <- c("state_id", "NAME", "population")
state_pop$state_id <- as.numeric(state_pop$state_id)
state_off <- data.frame(state.abb, state.name)
colnames(state_off) <- c("state", "NAME")
state_pop <- left_join(state_pop, state_off)
state_pop$state <- ifelse(state_pop$NAME=="District of Columbia", "DC", as.character(state_pop$state))
state_pop$state <- ifelse(state_pop$NAME=="Puerto Rico", "PR", as.character(state_pop$state))
names(mp_state)[names(mp_state) == "State_Of_Last_Contact"] <- "state"
mp_state_pop <- left_join(mp_state, state_pop)
mp_state_pop$per_capita <- round(mp_state_pop$total/mp_state_pop$population*100000,2)
states_merged_mp_pc <- geo_join(states, mp_state_pop, "STUSPS", "state")
pal_mp <- colorNumeric("Blues", domain=states_merged_mp_pc$per_capita)
states_merged_mp_pc <- subset(states_merged_mp_pc, !is.na(per_capita))
popup_sb <- paste0("<strong>", states_merged_mp_pc$NAME,
"</strong><br />Total: ", states_merged_mp_pc$total,
"<br />Per capita: ",
as.character(states_merged_mp_pc$per_capita))
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = states_merged_mp_pc ,
fillColor = ~pal_mp(states_merged_mp_pc$per_capita),
fillOpacity = 0.9,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_mp) %>%
addLegend(pal = pal_mp,
values = states_merged_mp_pc$per_capita,
position = "bottomright",
title = "Missing Persons<br />per 100,000<br/>residents")
kde <- bkde2D(kde <- bkde2D(dat[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100)),
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)
library(maptools)
library(maptools)
library(KernSmooth)
kde <- bkde2D(kde <- bkde2D(dat[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100)),
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)
library(data.table)
kde <- bkde2D(kde <- bkde2D(dat[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100)),
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)
kde <- bkde2D(kde <- bkde2D(states_merged_mp_pc[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100)),
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)
tmap_mode('view')
# Create the map of blocks and incidents
tm_shape(states_merged_mp_pc) + tm_borders() + tm_shape(df) +
tm_dots(col='navyblue')
tmap_mode('view')
# Create the map of blocks and incidents
tm_shape(states_merged_mp_pc) + tm_borders() + tm_shape(states_merged_mp) +
tm_dots(col='navyblue')
tmap_mode('view')
breach_dens <- smooth_map(breach,cover=states_merged_mp_pc, bandwidth = choose_bw(states_merged_mp))
breach_dens <- smooth_map(states_merged_mp,cover=states_merged_mp_pc, bandwidth = choose_bw(states_merged_mp))
tmap_mode('view')
mp_dens <- smooth_map(states_merged_mp_pc,cover=states_merged_mp, bandwidth = choose_bw(states_merged_mp))
choose_bw <- function(spdf) {
X <- coordinates(spdf)
sigma <- c(sd(X[,1]),sd(X[,2]))  * (2 / (3 * nrow(X))) ^ (1/6)
return(sigma/1000)
}
tmap_mode('view')
mp_dens <- smooth_map(states_merged_mp_pc,cover=states_merged_mp, bandwidth = choose_bw(df))
tmap_mode('view')
mp_dens <- smooth_map(states_merged_mp_pc,cover=states_merged_mp, bandwidth = choose_bw(states_merged_mp))
cres(states_merged_mp)
st_crs(states_merged_mp)
library(raster)
View(mp_dens)
View(mp_state)
View(mp_race_ethnicity)
View(mp_dens)
View(df)
View(states)
View(states_merged_mp)
View(df)
rd=.5
op=.8
clr="blue"
m = leaflet() %>% addTiles()
m %>% addCircles(lng,lat, radius = rd,opacity=op,col=clr)
rd=.5
op=.8
clr="blue"
m = leaflet() %>% addTiles()
m %>% addCircles(longitude,latitude, radius = rd,opacity=op,col=clr)
rd=.5
op=.8
clr="blue"
m = leaflet() %>% addTiles()
m %>% addCircles(df$Longitude,df$Latitude, radius = rd,opacity=op,col=clr)
X=cbind(df$Longitude,df$Latitude)
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[,1]),bw.ucv(X[,2])))
x=kde2d$x1
y=kde2d$x2
z=kde2d$fhat
CL=contourLines(x , y , z)
m = leaflet() %>% addTiles()
m %>% addPolygons(CL[[5]]$x,CL[[5]]$y,fillColor = "red", stroke = FALSE)
kde2d <- bkde2D(x, y, h, n = 25, lims = c(range(x), range(y)))
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[,2]),bw.ucv(X[,4])))
m = leaflet() %>% addTiles()
m %>% addPolygons(CL[[5]]$x,CL[[5]]$y,fillColor = "red", stroke = FALSE)
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[]),bw.ucv(X[])))
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[1]),bw.ucv(X[,2])))
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[1]),bw.ucv(X[,2])))
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[,1]),bw.ucv(X[,2])))
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[,2]),bw.ucv(X[,2])))
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[,3]),bw.ucv(X[,3])))
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[,3]),bw.ucv(X[,2])))
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[,2]),bw.ucv(X[,2])))
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = states_merged_mp_pc ,
fillColor = ~pal_mp(states_merged_mp_pc$per_capita),
fillOpacity = 0.9,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_mp) %>%
addLegend(pal = pal_mp,
values = states_merged_mp_pc$per_capita,
position = "bottomright",
title = "Missing Persons<br />per 100,000<br/>residents")
MASS::bandwidth.nrd()
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[,0.25]),bw.ucv(X[,0.75])))
kde2d <- bkde2D(X, bandwidth=c(bw.ucv(X[,0.25]),bw.ucv(X[,0.75])))
kde <- bkde2D(df[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100))
CL <- contourLines(kde$x1 , kde$x2 , kde$fhat)
kde <- bkde2D(df[ , list(longitude, latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100))
kde <- bkde2D(df[ , list(Longitude, Latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100))
kde <- bkde2D(df[ , list(df$Longitude, df$Latitude)],
bandwidth=c(.0045, .0068), gridsize = c(100,100))
class(df)
tmap_mode('plot')
contours <- seq(0, 1.4, by=0.2)
mp_dens <- smooth_map(states_merged_mp, cover=state, breaks=contours,
style='fixed',
bandwidth=choose_bw(states_merged_mp))
View(states_merged_mp)
tmap_mode('plot')
contours <- seq(0, 1.4, by=0.2)
mp_dens <- smooth_map(states_merged_mp, cover=states_merged_mp, breaks=contours,
style='fixed',
bandwidth=choose_bw(states_merged_mp))
df <- readRDS("./sample_data.rds")
runApp()
saveRDS(popup_mp, "./popup_mp.rds")
saveRDS(mp_state, "./mp_state.rds")
saveRDS(popup_sb, "./popup_sb.rds")
saveRDS(mp_state, "./mp_state.rds")
saveRDS(mp_race_ethnicity, "./mp_race_ethnicity.rds")
saveRDS(states_merged_mp, "./states_merged_mp.rds")
saveRDS(pal, "./pal.rds")
saveRDS(popup_mp, "./popup_mp.rds")
saveRDS(state_pop, "./state_pop.rds")
saveRDS(state_off, "./state_off.rds")
saveRDS(state_pop, "./state_pop.rds")
saveRDS(mp_state_pop, "./mp_state_pop.rds")
saveRDS(mp_state_pop, "./mp_state_pop.rds")
saveRDS(states_merged_mp_pc, "./states_merged_mp_pc.rds")
pal_mp <- colorNumeric("Blues", domain=states_merged_mp_pc$per_capita)
saveRDS(states_merged_mp_pc, "./states_merged_mp_pc.rds")
saveRDS(popup_sb, "./popup_sb.rds")
saveRDS(pal_mp, "./pal_mp.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
#Title
titlePanel("Mapping the Missing | An Interactive Spatial Analysis Tool"),
helpText( "Source data provided by the "
, a("The National Missing and Unidentified Persons System (Namus), Department of Justice", href = "https://www.namus.gov")
, "."
),
sidebarLayout( sidebarPanel( selectInput( inputId = 'variable'
, label   = "Choose a State"
, choices = colnames(df$State_Of_Last_Contact)
)
)
# Leaflet map
, mainPanel( leafletOutput("mymap",height = 1000) )
)
)
df <- readRDS("./sample_data.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pal  <- readRDS("./pal.rds")
runApp()
leaflet(data=states_merged_mp_pc) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = states_merged_mp_pc ,
fillColor = ~pal_mp(states_merged_mp_pc$per_capita),
fillOpacity = 0.9,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_mp) %>%
addLegend(pal = pal_mp,
values = states_merged_mp_pc$per_capita,
position = "bottomright",
title = "Missing Persons<br />per 100,000<br/>residents")
popup_mp <- paste0("<strong>", states_merged_mp_pc$NAME,
"</strong><br />Total: ", states_merged_mp_pc$total,
"<br />Per capita: ",
as.character(states_merged_mp_pc$per_capita))
saveRDS(popup_mp, "./popup_mp.rds")
popup_mp <- readRDS("./popup_mp.rds")
runApp()
pal_mp <- readRDS("./pal_mp.rds")
runApp()
output$mymap1 <- renderLeaflet({
n <- leaflet(data=states_merged_mp) %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>% #geographic center of the United States
addPolygons(data = states_merged_mp ,
fillColor = ~pal(states_merged_mp$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_mp) %>%
addLegend(pal = pal,
values = states_merged_mp$total,
position = "bottomright",
title = "Missing Persons in the United States")
n
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(states_merged_mp_pc)
runApp()
